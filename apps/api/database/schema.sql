-- MyMVP Application Database Schema for Supabase
-- Run this in your Supabase SQL editor to create the applications table

-- Create applications table
CREATE TABLE IF NOT EXISTS applications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  company VARCHAR(255) NOT NULL,
  prd_content TEXT NOT NULL,
  budget_timeline VARCHAR(50) NOT NULL CHECK (budget_timeline IN ('under_2k', '2k_1month', '5k_2weeks', '10k_flexible', 'exploring')),
  project_readiness VARCHAR(50) NOT NULL CHECK (project_readiness IN ('ready_collaboration', 'hands_off', 'marketing_too')),
  technical_preferences TEXT,
  qualification_level VARCHAR(20) NOT NULL CHECK (qualification_level IN ('highly_qualified', 'qualified', 'unqualified')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_applications_email ON applications(email);
CREATE INDEX IF NOT EXISTS idx_applications_qualification ON applications(qualification_level);
CREATE INDEX IF NOT EXISTS idx_applications_created_at ON applications(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_applications_budget_timeline ON applications(budget_timeline);

-- Create function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_applications_updated_at 
    BEFORE UPDATE ON applications 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Add Row Level Security (RLS) policies
ALTER TABLE applications ENABLE ROW LEVEL SECURITY;

-- Policy for service role (API access)
CREATE POLICY "Enable all operations for service role" ON applications
  FOR ALL USING (auth.role() = 'service_role');

-- Policy for authenticated users (if you add dashboard access later)  
CREATE POLICY "Enable read access for authenticated users" ON applications
  FOR SELECT USING (auth.role() = 'authenticated');

-- Create a view for application analytics (optional)
CREATE OR REPLACE VIEW application_analytics AS
SELECT 
  DATE_TRUNC('day', created_at) as date,
  qualification_level,
  budget_timeline,
  project_readiness,
  COUNT(*) as count
FROM applications
GROUP BY 
  DATE_TRUNC('day', created_at),
  qualification_level,
  budget_timeline,
  project_readiness
ORDER BY date DESC;

-- Grant access to the view
GRANT SELECT ON application_analytics TO service_role;
GRANT SELECT ON application_analytics TO authenticated;

-- Insert sample data for testing (optional - remove in production)
/*
INSERT INTO applications (
  name, 
  email, 
  company, 
  prd_content, 
  budget_timeline, 
  project_readiness, 
  technical_preferences, 
  qualification_level
) VALUES (
  'Test User',
  'test@example.com',
  'Test Company',
  'This is a sample PRD content that meets the minimum 500 character requirement for testing the application form. It includes details about the product vision, target market, core features, and technical requirements. The PRD covers user stories, success metrics, and launch strategy as required by the MyMVP application process.',
  '5k_2weeks',
  'ready_collaboration',
  'No specific technical requirements',
  'highly_qualified'
);
*/

-- Comments for documentation
COMMENT ON TABLE applications IS 'Stores MyMVP application form submissions with qualification data';
COMMENT ON COLUMN applications.id IS 'Unique identifier for each application';
COMMENT ON COLUMN applications.prd_content IS 'Complete PRD content generated by applicant using AI';
COMMENT ON COLUMN applications.qualification_level IS 'Automated qualification result: highly_qualified, qualified, or unqualified';
COMMENT ON COLUMN applications.budget_timeline IS 'Budget and timeline selection from application form';
COMMENT ON COLUMN applications.project_readiness IS 'Readiness assessment for collaborative development process';